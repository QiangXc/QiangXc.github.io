<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>【EssentialCpp】1 Basic 基础</title>
    <link href="/2022/07/04/EssentialCpp1/"/>
    <url>/2022/07/04/EssentialCpp1/</url>
    
    <content type="html"><![CDATA[<h1 id="c编程基础">C++编程基础</h1><p>对《Essential C++》的阅读总结 -- 第一章</p><p>对一些C++基础语法做回顾</p><h2 id="对象的定义与初始化">1. 对象的定义与初始化</h2><p>类（class），是用户自定义的数据类型。所以数据类型的定义和初始化可以看作一个对象的定义和初始化。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br>string user_name;<br><span class="hljs-type">int</span> num;          <span class="hljs-comment">//对象的定义</span><br><br><span class="hljs-comment">//两种初始化</span><br><span class="hljs-type">int</span> num = <span class="hljs-number">0</span>; <span class="hljs-comment">//运算符初始化</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">num</span><span class="hljs-params">(<span class="hljs-number">0</span>)</span></span>; <span class="hljs-comment">//构造函数语法</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;complex&gt;</span> <span class="hljs-comment">//复数类</span></span><br><span class="hljs-function">complex&lt;<span class="hljs-type">double</span>&gt; <span class="hljs-title">purei</span><span class="hljs-params">(<span class="hljs-number">0</span>,<span class="hljs-number">7</span>)</span></span>; <br><span class="hljs-comment">//构造语法可以给对象多个初值（实部，虚部），而运算符初始化不能</span><br></code></pre></td></tr></table></figure><h2 id="条件语句与循环语句">2. 条件语句与循环语句</h2><h3 id="条件语句">2.1 条件语句</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">if</span> (usr_guess == next elem)<br>    num_cor++;     <span class="hljs-comment">//在条件中执行第一句，即此句</span><br>    got_it = <span class="hljs-literal">true</span>; <span class="hljs-comment">//不在条件中执行此句</span><br><br><span class="hljs-comment">///////////////////////////////////////////</span><br><span class="hljs-keyword">if</span> (usr_guess == next elem)<br>&#123;<br>    num_cor++;  <br>    got_it = <span class="hljs-literal">true</span>; <br>&#125;                   <span class="hljs-comment">//执行多句则放在语句块中</span><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">switch</span>(num)<br>&#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>        <span class="hljs-comment">//num = 1时执行</span><br>        <span class="hljs-keyword">break</span>;<br><br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>;<br>        <span class="hljs-comment">//num = 2时执行</span><br>        <span class="hljs-keyword">break</span>;<br><br>    <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>;<br>        <span class="hljs-comment">//num = 3时执行</span><br>        <span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="循环语句">2.2 循环语句</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">while</span>( )<br>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="array-and-vector">3. Array and Vector</h2><p>一般而言，建议使用<span class="math inline">\(vector\)</span>甚于<span class="math inline">\(array\)</span></p><p>定义： 元素类型、名称和尺度大小</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//Array</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> size = <span class="hljs-number">18</span>;<br><span class="hljs-type">int</span> pell_seq[ size ]; <span class="hljs-comment">//array大小必须为常量表达式</span><br><br><span class="hljs-comment">//Vector</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">pell_seq</span><span class="hljs-params">(size)</span></span>; <span class="hljs-comment">//vector大小可以不为常量表达式</span><br><br><span class="hljs-comment">//Array的初始化，编译器会算出此array包含了18个元素</span><br><span class="hljs-type">int</span> elem_seq[ ] =<br>&#123;<br>    <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">7</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">12</span>,<br>    <span class="hljs-number">3</span>,<span class="hljs-number">6</span>,<span class="hljs-number">10</span>,<span class="hljs-number">4</span>,<span class="hljs-number">9</span>,<span class="hljs-number">16</span>,<span class="hljs-number">5</span>,<span class="hljs-number">12</span>,<span class="hljs-number">22</span><br>&#125;;<br><br><span class="hljs-comment">//vector不支持上述初始化列表，需用一个一个赋值，或者用已初始化的array作为其初值</span><br><br><span class="hljs-comment">//vector知道自己自己的大小</span><br>vector.<span class="hljs-built_in">size</span>() <span class="hljs-comment">//会返回包含元素的个数</span><br><br></code></pre></td></tr></table></figure><h2 id="指针带来的弹性">4. 指针带来的弹性</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> ival = <span class="hljs-number">1024</span>;<br><br><span class="hljs-type">int</span> *pi = &amp;ival; <span class="hljs-comment">// pi是int类型对象的指针；pi的初值是ival所在的内存地址。</span><br><br><span class="hljs-comment">//提领（dereference）操作，取位于该指针所指地址上的对象</span><br><span class="hljs-keyword">if</span> (*pi != <span class="hljs-number">1024</span>) <span class="hljs-comment">//读ival的值</span><br>    *pi = <span class="hljs-number">1024</span>;  <span class="hljs-comment">//写值至ival</span><br></code></pre></td></tr></table></figure><p><span class="math inline">\(vector\)</span>的指针</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//六个vector对象：</span><br>vector&lt;<span class="hljs-type">int</span>&gt; A, B, C, D, E, F;<br><br><span class="hljs-comment">//指向vector&lt;int&gt;的指针pv，初始化为0（null）</span><br>vector&lt;<span class="hljs-type">int</span>&gt; *pv = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">//定义一个指针数组，每个指针都指向vector&lt;int&gt;</span><br>vector&lt;<span class="hljs-type">int</span>&gt; *seq_addrs[<span class="hljs-number">6</span>] =&#123;<br>    &amp;a, &amp;b, &amp;c, &amp;d, &amp;e, &amp;f<br>&#125;; <span class="hljs-comment">//seq_addrs是一个array，元素类型是vector&lt;int&gt;</span><br><br><span class="hljs-comment">//vector的句点（dot）选择操作，指针操作时要用arrow</span><br>a.<span class="hljs-built_in">empty</span>();<br>pv = seq_addrs[<span class="hljs-number">0</span>];<br>pv-&gt;<span class="hljs-built_in">empty</span>(); <span class="hljs-comment">//等价a.empty();</span><br><br><span class="hljs-comment">//vector的下标运算符，指针操作时要先提领pv</span><br>a[<span class="hljs-number">1</span>];<br>pv = seq_addrs[<span class="hljs-number">0</span>];<br>(*pv)[<span class="hljs-number">1</span>]; <span class="hljs-comment">//等价a[1]，下标运算符优先级较高，故要加括号。</span><br></code></pre></td></tr></table></figure><h2 id="文件的读写">5. 文件的读写</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;fstream&gt;</span> <span class="hljs-comment">//对文件进行读写操作首先要包含fstream头文件</span></span><br><br><span class="hljs-comment">//定义一个ofstream（供输出用的file stream）对象，并传入文件名</span><br><span class="hljs-function">ofstream <span class="hljs-title">outfile</span><span class="hljs-params">(<span class="hljs-string">&quot;seq_data.txt&quot;</span>)</span></span>; <span class="hljs-comment">//没有该文件的话会自动创建</span><br><span class="hljs-function">ofstream <span class="hljs-title">outfile</span><span class="hljs-params">(<span class="hljs-string">&quot;seq_data.txt&quot;</span>,ios_base::app)</span></span>;<span class="hljs-comment">//追加模式，新数据会被加到文件末尾</span><br><br><span class="hljs-keyword">if</span>(! outfile) <span class="hljs-comment">//文件打开错误</span><br><br><span class="hljs-comment">//数据写入</span><br>outfile &lt;&lt; usr_name  &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span><br>        &lt;&lt; num_tries &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span><br>        &lt;&lt; num_right &lt;&lt; endl;<br><br><span class="hljs-comment">//////////////////////////////////////////////////////////////////</span><br><br><span class="hljs-comment">//定义ifstream对象，读</span><br><span class="hljs-function">ifstream <span class="hljs-title">infile</span><span class="hljs-params">(<span class="hljs-string">&quot;seq_data.txt&quot;</span>)</span></span>;<br>infile &gt;&gt; name;<br><br><span class="hljs-comment">//同时读写</span><br><span class="hljs-function">fstream <span class="hljs-title">iofile</span> <span class="hljs-params">(<span class="hljs-string">&quot;seq_data.txt&quot;</span>,ios_base::in|ios_base::app)</span><span class="hljs-comment">//以追加模式打开</span></span><br><span class="hljs-function"></span><br><span class="hljs-function">iofile.<span class="hljs-title">seekg</span><span class="hljs-params">(<span class="hljs-number">0</span>)</span></span>; <span class="hljs-comment">//开始读取前，将文件重新定位至起始处</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【自学日语】1.五十音（上）</title>
    <link href="/2022/06/08/Japenese1/"/>
    <url>/2022/06/08/Japenese1/</url>
    
    <content type="html"><![CDATA[<p>来源于b站阿飞老师日语课<a href="https://www.bilibili.com/video/BV1Bp4y1D747?p=2&amp;vd_source=34c74ed5f3e7ddaddbe5ec70455d29c9">P2 [日语入门]五十音（上）</a></p><h2 id="五十音">五十音</h2><h3 id="介绍">介绍</h3><p>目前理解，类似于中文里的汉语拼音</p><h3 id="五十音图">五十音图</h3><p><img src="./50yin.png" alt="五十音图" /> あ段记法 “我开桑塔纳 蛤蟆也来玩”</p><h2 id="あ行-あいうえお">あ行-あいうえお</h2><p>あ行是<strong>元音行</strong>，非常重要 <img src="./aline.png" alt="あ行手写" /></p><p>あ - a 假名来源汉字“安”</p><p>い - i 假名来源汉字“以”</p><p>う - u(短音，no嘟嘴) 假名来源汉字“宇”，象形“5”。“宇宙”发音：うちゅう 罗马音(uchuu)</p><p>え - e 假名来源汉字“衣”，象形“诶”</p><p>お - o 假名来源汉字“於”，象形“我”</p><p>a i u e o 的声调 <span class="math inline">\(\underline{\text{あ}}\overline{\text{いう}}\underline{\text{えお}}\)</span></p><p>声调解释见<a href="#jump1">声调</a></p><h2 id="か行-かきくけこ">か行-かきくけこ</h2><p><img src="./kaline.png" alt="か行手写" /> 组合：ka ki ku ke ko 无变式，主要记住形状</p><p>か - ka 假名来源汉字“加”</p><p>き - ki 假名来源汉字“幾” 象形：一把钥匙-Key</p><p>く - ku 假名来源汉字“久” 象形: 哭的嘴巴</p><p>け - ke 假名来源汉字“计” 日语“计算”发音 けえしあkesan</p><p>こ - ko 假名来源汉字“己” 象形“口”</p><h2 id="さ行-さしすせそ">さ行-さしすせそ</h2><p>组合有变式 sa <strong>shi(xi)　su(θ~si)</strong> se so <img src="./saline.png" alt="さ行手写" /> さ - sa 假名来源汉字“佐” 象形：“杀”</p><p>し - shi(xi) 假名来源汉字“之” 象形：吸管</p><p>す - su(θ~si) 假名来源汉字“寸” 象形：juice</p><p>せ - se 假名来源汉字“世” “世界”せかい</p><p>そ - so 假名来源汉字“曾” 象形：嗦面 そば荞麦面</p><h2 id="た行-たちつてと">た行-たちつてと</h2><p>ta <strong>chi(qi) tsu(ci)</strong> te to <img src="./taline.png" alt="た行手写" /> た - ta 假名来源汉字“太”</p><p>ち - chi(qi) 假名来源汉字“知” 象形：七 6+1</p><p>つ - tsu(ci) 假名来源汉字“川” 象形：吃豆豆的嘴巴</p><p>て - te 假名来源汉字“天”</p><p>と - to 假名来源汉字“止” 象形：被拖走的小孩</p><h2 id="な行-なにぬねの">な行-なにぬねの</h2><p>na ni nu ne no <img src="./naline.png" alt="な行手写" /> な - na 假名来源汉字“奈”</p><p>に - ni 假名来源汉字“仁”</p><p>ぬ - nu 假名来源汉字“奴”</p><p>ね - ne 假名来源汉字“弥” 记忆：尾巴内卷</p><p>の - no 假名来源汉字“乃”</p><h2 id="声调"><span id="jump1">声调</h2><p>暂时凭感觉，慢慢增加语感吧 <img src="./shendiao.png" alt="声调" /></p><p>和栋宇在寝室一起看完的这节课，他太牛了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>日语，五十音</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
